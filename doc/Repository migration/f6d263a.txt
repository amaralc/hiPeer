commit f6d263a5bdf206e666f465566a469742a9076892
Author: amaralc <amaral.calil@gmail.com>
Date:   Wed Jan 15 05:43:38 2020 -0300

    Firmware - solicita ativacao de usuario antes de ativacao do container
    
    Mensgens de erro e algumas validacoes implementadas

diff --git a/src/firmware/main/main.ino b/src/firmware/main/main.ino
index a7ad8ce..244bcf1 100644
--- a/src/firmware/main/main.ino
+++ b/src/firmware/main/main.ino
@@ -1,59 +1,63 @@
 /*
-  LEDs
 
-  Turn 12 LEDs on with the push of a button
+  hiPeer
 
-  Created 12 Jan 2020
+  Turn specific LEDs on for 100ms
+
+  Created 15 Jan 2020
+  
   by Calil Amaral
+  
 */
 
-// pino que aciona o rele dos LEDs
-const int ledButton = 53; 
-
-// variavel de estado do ledButton
-int ledButtonState = LOW;
-
-// define pino que envia sinal para LEDs
-int ledSignal = 52;
+// User info
+const int ledButton = 53; // user validation pin (when pressed, change userStatus to 1)
+int ledButtonState = LOW; // store initial state of 'ledButton' to LOW
+int userState = 0;        // store user status (1 - valid, 0 - invalid)
+String inputString = "";  // string to hold user input  
 
-// define estado do container;
-int containerState = 0;
-
-// string to hold input
-String inputString = "";    
-
-// define array with container pins
-int containerPins[12] = {28, 30, 32, 34, 36, 38, 40, 42, 44, 46, 48, 50};
-
-// define variable to hold container pin number
-int containerPin;
+// Container info
+int containerPins[12] = {28, 30, 32, 34, 36, 38, 40, 42, 44, 46, 48, 50}; // define array with container pins
+int containerSignalPin = 28;                                              // define pino que envia sinal para LEDs (default = 28);
+int containerState = 0;                                                   // define estado do container;
+int containerPin;                                                         // define variable to hold container pin number
 
 // the setup function runs once when you press reset or power the board
 void setup() {
 
-  // inicializa comunicacao serial a 9600 bits por segundo
+  // start serial communications at 9600 bits per second
   Serial.begin(9600);
   
-  // inicializa pino digital ledButton como input
+  // start digital pin 'ledButton' as input
   pinMode(ledButton, INPUT);
 
-  // inicializa pino digital ledSignal como output
-  pinMode(ledSignal, OUTPUT);
+  // start digital pin 'containerSignalPin' as output'
+  pinMode(containerSignalPin, OUTPUT);
+
+  // message user to validate session
+  Serial.println("Click the button to validate new session");
   
 }
 
 // the loop function runs over and over again forever
 void loop() {
 
-  
+  // read ledButton and store result in 'ledButtonState'
+  ledButtonState = digitalRead(ledButton);
 
-  if (containerState == 1){
-    digitalWrite(containerPin,HIGH);  
-    delay(100);
-    digitalWrite(containerPin, LOW); 
-    delay(100);
-    containerState = 0;
-  } 
+  // if ledButton active
+  if (ledButtonState == HIGH){
+
+    // switch userState to 1 (valid)
+    userState = 1;
+    Serial.print("User state: ");
+    Serial.println(userState); 
+    Serial.println("Valid user");
+    Serial.println();
+    Serial.println("Type the number of the container you wish to open :");    
+    delay(200);                    
+    
+  }  
 
   // Read serial input:
   while (Serial.available() > 0) {
@@ -62,71 +66,63 @@ void loop() {
       // convert the incoming byte to a char and add it to the string:
       inputString += (char)inputChar;
     }
+    
     // if you get a newline, print the string, then the string's value:
     if (inputChar == '\n') {
-      Serial.print("Value:");
-      Serial.println(inputString.toInt());
-
-      // define 'containerPin' according to user input
-      containerPin = containerPins[inputString.toInt() - 1];
-      Serial.print("Container pin number:");
-      Serial.println(containerPin);
-      pinMode(containerPin, OUTPUT);
-      containerState = 1;
-            
-      // clear the string for new input:
-      inputString = "";
-    }
-  }
 
-  // faz leitura do ledButton e aguarda para manter estabilidade
-  ledButtonState = digitalRead(ledButton);  
-  delay(300);
+      // if user is valid
+      if(userState == 1){
 
-  // if ledButton active
-  if (ledButtonState == HIGH){
-
-    if (containerState == 0){
-      containerState = 1;
-    } else {
-      containerState = 0;    
-    }      
-
-    
-
-    // set ledSignal to high
-    //digitalWrite(ledSignal, HIGH);
-
-    // print out the state of the button:
-    // Serial.println(ledButtonState);
-
-    // delay in between reads for stability
-    delay(1);        
-    
-  } else {
-
-    // set ledSignal to low
-    // digitalWrite(ledSignal, LOW); 
-
-    // delay in between reads for stability
-    delay(1);   
-  }
+        Serial.print("Selected container:");
+        Serial.println(inputString.toInt());
   
-
-
-
-  /*
-  digitalWrite(LED_BUILTIN, HIGH);  // turn the LED on (HIGH is the voltage level)
-  digitalWrite(ledSignal, HIGH);    // turn LEDs on
+        // define 'containerPin' according to user input
+        containerPin = containerPins[inputString.toInt() - 1];
+        Serial.print("Container pin number:");
+        Serial.println(containerPin);
   
-  delay(1000);                      // wait for a second
-  digitalWrite(LED_BUILTIN, LOW);   // turn the LED off by making the voltage LOW
-  digitalWrite(ledSignal, LOW);     // turn LEDs on  
-  delay(1000);   
-  // wait for a second
+        // set pin to output (NOT RECOMMENDED - MOVE TO SETUP!!!!!!!)
+        pinMode(containerPin, OUTPUT); // (NOT RECOMMENDED - DEFINE PINS IN SETUP IN NEXT REVIEW!!!!!!)
+        if (userState == 1){
+          containerState = 1;        
+        }   
+            
+        // clear the string for new input:
+        inputString = "";        
 
-  */
-  
+        // else, if user is not valid  
+      } else {
+
+      // message user to validate session
+      Serial.println("Click the button before selecting the container");
 
- 
+      // clear the string for new input:
+      inputString = ""; 
+              
+      };      
+      
+    }  
+
+    // if user is valid and 'containerState' is active
+    if ((userState ==1)&&(containerState == 1)){
+
+      // activate container
+      digitalWrite(containerPin, HIGH);  
+      
+      // message user about countdown time
+      Serial.println("The selected container will be opened for 3 seconds. Hurry up!");
+      delay(3000);
+
+      // deactivate container
+      digitalWrite(containerPin, LOW); 
+
+      // reset 'containerState' and 'userState'
+      containerState = 0;
+      userState = 0;
+
+      // message user to validate session
+      Serial.println();
+      Serial.println("Click button to validate new session");
+    }   
+  } 
 }
